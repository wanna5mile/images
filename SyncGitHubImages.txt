/**
 * Self-updating API for GitHub images.
 * 1️⃣ Fetches image files from GitHub
 * 2️⃣ Syncs them to Google Sheet
 * 3️⃣ Returns JSON response for the website
 */

function doGet() {
  const username = "wanna5mile";
  const repo = "images";
  const path = "img";
  const branch = "main";

  const apiUrl = `https://api.github.com/repos/${username}/${repo}/contents/${path}?ref=${branch}`;
  const rawBase = `https://raw.githubusercontent.com/${username}/${repo}/${branch}/${path}/`;

  const SHEET_ID = "1o6nNW7O03Oo41zLVwGMpwGxROl1c8lZVJW0jRnjWte8";
  const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();

  try {
    // Fetch GitHub folder
    const response = UrlFetchApp.fetch(apiUrl, {
      headers: { "User-Agent": "GoogleScript" },
      muteHttpExceptions: true,
    });

    const data = JSON.parse(response.getContentText());
    if (!Array.isArray(data)) throw new Error("Invalid GitHub API response");

    // Extract image info
    const rows = data
      .filter(f => f.type === "file" && f.name.match(/\.(png|jpg|jpeg|gif|webp)$/i))
      .map(f => {
        const rawLink = rawBase + f.name;
        return [
          f.name,               // Title
          `=IMAGE("${rawLink}")`, // Preview formula (for Sheet's benefit)
          rawLink,              // Raw link
        ];
      });

    // Clear & update sheet
    sheet.clearContents();
    // ⬇️ Updated Sheet Header for clarity
    sheet.getRange("A1:C1").setValues([["Title", "Sheet Image Preview", "Raw Image Link"]]);
    if (rows.length > 0) {
      sheet.getRange(2, 1, rows.length, 3).setValues(rows);
    }

    // Create a clean JSON response for your site
    const jsonData = rows.map(r => ({
      title: r[0],
      // ⬇️ EDITED LINE: Now using the raw link (r[2]) for imgPrevLink.
      // This forces the client-side JS to use the raw link for the preview.
      imgPrevLink: r[2],
      imgRawLink: r[2],
    }));

    return ContentService
      .createTextOutput(JSON.stringify(jsonData))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (err) {
    return ContentService
      .createTextOutput(JSON.stringify({ error: err.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}
